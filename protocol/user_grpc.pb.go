// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

var userServiceCreateUserStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateUser",
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userServiceDeleteStreamDesc = &grpc.StreamDesc{
	StreamName: "Delete",
}

func (c *userServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.UserService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userServiceUpdateStreamDesc = &grpc.StreamDesc{
	StreamName: "Update",
}

func (c *userServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.UserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userServiceFindStreamDesc = &grpc.StreamDesc{
	StreamName: "Find",
}

func (c *userServiceClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protocol.UserService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceService is the service API for UserService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterUserServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type UserServiceService struct {
	CreateUser func(context.Context, *CreateRequest) (*EmptyResponse, error)
	Delete     func(context.Context, *DeleteRequest) (*EmptyResponse, error)
	Update     func(context.Context, *UpdateRequest) (*EmptyResponse, error)
	Find       func(context.Context, *FindRequest) (*User, error)
}

func (s *UserServiceService) createUser(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateUser(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserServiceService) delete(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.UserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserServiceService) update(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserServiceService) find(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.UserService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterUserServiceService registers a service implementation with a gRPC server.
func RegisterUserServiceService(s grpc.ServiceRegistrar, srv *UserServiceService) {
	srvCopy := *srv
	if srvCopy.CreateUser == nil {
		srvCopy.CreateUser = func(context.Context, *CreateRequest) (*EmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
		}
	}
	if srvCopy.Delete == nil {
		srvCopy.Delete = func(context.Context, *DeleteRequest) (*EmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
		}
	}
	if srvCopy.Update == nil {
		srvCopy.Update = func(context.Context, *UpdateRequest) (*EmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
		}
	}
	if srvCopy.Find == nil {
		srvCopy.Find = func(context.Context, *FindRequest) (*User, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "protocol.UserService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CreateUser",
				Handler:    srvCopy.createUser,
			},
			{
				MethodName: "Delete",
				Handler:    srvCopy.delete,
			},
			{
				MethodName: "Update",
				Handler:    srvCopy.update,
			},
			{
				MethodName: "Find",
				Handler:    srvCopy.find,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "protocol/user.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewUserServiceService creates a new UserServiceService containing the
// implemented methods of the UserService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewUserServiceService(s interface{}) *UserServiceService {
	ns := &UserServiceService{}
	if h, ok := s.(interface {
		CreateUser(context.Context, *CreateRequest) (*EmptyResponse, error)
	}); ok {
		ns.CreateUser = h.CreateUser
	}
	if h, ok := s.(interface {
		Delete(context.Context, *DeleteRequest) (*EmptyResponse, error)
	}); ok {
		ns.Delete = h.Delete
	}
	if h, ok := s.(interface {
		Update(context.Context, *UpdateRequest) (*EmptyResponse, error)
	}); ok {
		ns.Update = h.Update
	}
	if h, ok := s.(interface {
		Find(context.Context, *FindRequest) (*User, error)
	}); ok {
		ns.Find = h.Find
	}
	return ns
}

// UnstableUserServiceService is the service API for UserService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableUserServiceService interface {
	CreateUser(context.Context, *CreateRequest) (*EmptyResponse, error)
	Delete(context.Context, *DeleteRequest) (*EmptyResponse, error)
	Update(context.Context, *UpdateRequest) (*EmptyResponse, error)
	Find(context.Context, *FindRequest) (*User, error)
}
