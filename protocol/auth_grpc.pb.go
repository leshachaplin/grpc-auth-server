// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error)
	DeleteClaims(ctx context.Context, in *DeleteClaimsRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error)
	AddClaims(ctx context.Context, in *AddClaimsRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error)
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error)
	ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

var authServiceSignInStreamDesc = &grpc.StreamDesc{
	StreamName: "SignIn",
}

func (c *authServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/protocol.AuthService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var authServiceSignUpStreamDesc = &grpc.StreamDesc{
	StreamName: "SignUp",
}

func (c *authServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error) {
	out := new(AuthEmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.AuthService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var authServiceDeleteClaimsStreamDesc = &grpc.StreamDesc{
	StreamName: "DeleteClaims",
}

func (c *authServiceClient) DeleteClaims(ctx context.Context, in *DeleteClaimsRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error) {
	out := new(AuthEmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.AuthService/DeleteClaims", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var authServiceAddClaimsStreamDesc = &grpc.StreamDesc{
	StreamName: "AddClaims",
}

func (c *authServiceClient) AddClaims(ctx context.Context, in *AddClaimsRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error) {
	out := new(AuthEmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.AuthService/AddClaims", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var authServiceRefreshTokenStreamDesc = &grpc.StreamDesc{
	StreamName: "RefreshToken",
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/protocol.AuthService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var authServiceConfirmStreamDesc = &grpc.StreamDesc{
	StreamName: "Confirm",
}

func (c *authServiceClient) Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error) {
	out := new(AuthEmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.AuthService/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var authServiceRestoreStreamDesc = &grpc.StreamDesc{
	StreamName: "Restore",
}

func (c *authServiceClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error) {
	out := new(AuthEmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.AuthService/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var authServiceForgotPasswordStreamDesc = &grpc.StreamDesc{
	StreamName: "ForgotPassword",
}

func (c *authServiceClient) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error) {
	out := new(AuthEmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.AuthService/ForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var authServiceChangePasswordStreamDesc = &grpc.StreamDesc{
	StreamName: "ChangePassword",
}

func (c *authServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*AuthEmptyResponse, error) {
	out := new(AuthEmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.AuthService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceService is the service API for AuthService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterAuthServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type AuthServiceService struct {
	SignIn         func(context.Context, *SignInRequest) (*SignInResponse, error)
	SignUp         func(context.Context, *SignUpRequest) (*AuthEmptyResponse, error)
	DeleteClaims   func(context.Context, *DeleteClaimsRequest) (*AuthEmptyResponse, error)
	AddClaims      func(context.Context, *AddClaimsRequest) (*AuthEmptyResponse, error)
	RefreshToken   func(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	Confirm        func(context.Context, *ConfirmRequest) (*AuthEmptyResponse, error)
	Restore        func(context.Context, *RestoreRequest) (*AuthEmptyResponse, error)
	ForgotPassword func(context.Context, *ForgotPasswordRequest) (*AuthEmptyResponse, error)
	ChangePassword func(context.Context, *ChangePasswordRequest) (*AuthEmptyResponse, error)
}

func (s *AuthServiceService) signIn(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.AuthService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AuthServiceService) signUp(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.AuthService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AuthServiceService) deleteClaims(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClaimsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeleteClaims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.AuthService/DeleteClaims",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteClaims(ctx, req.(*DeleteClaimsRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AuthServiceService) addClaims(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClaimsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.AddClaims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.AuthService/AddClaims",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AddClaims(ctx, req.(*AddClaimsRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AuthServiceService) refreshToken(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.AuthService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AuthServiceService) confirm(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.AuthService/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Confirm(ctx, req.(*ConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AuthServiceService) restore(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.AuthService/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AuthServiceService) forgotPassword(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.AuthService/ForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ForgotPassword(ctx, req.(*ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AuthServiceService) changePassword(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.AuthService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterAuthServiceService registers a service implementation with a gRPC server.
func RegisterAuthServiceService(s grpc.ServiceRegistrar, srv *AuthServiceService) {
	srvCopy := *srv
	if srvCopy.SignIn == nil {
		srvCopy.SignIn = func(context.Context, *SignInRequest) (*SignInResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
		}
	}
	if srvCopy.SignUp == nil {
		srvCopy.SignUp = func(context.Context, *SignUpRequest) (*AuthEmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
		}
	}
	if srvCopy.DeleteClaims == nil {
		srvCopy.DeleteClaims = func(context.Context, *DeleteClaimsRequest) (*AuthEmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DeleteClaims not implemented")
		}
	}
	if srvCopy.AddClaims == nil {
		srvCopy.AddClaims = func(context.Context, *AddClaimsRequest) (*AuthEmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method AddClaims not implemented")
		}
	}
	if srvCopy.RefreshToken == nil {
		srvCopy.RefreshToken = func(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
		}
	}
	if srvCopy.Confirm == nil {
		srvCopy.Confirm = func(context.Context, *ConfirmRequest) (*AuthEmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
		}
	}
	if srvCopy.Restore == nil {
		srvCopy.Restore = func(context.Context, *RestoreRequest) (*AuthEmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
		}
	}
	if srvCopy.ForgotPassword == nil {
		srvCopy.ForgotPassword = func(context.Context, *ForgotPasswordRequest) (*AuthEmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
		}
	}
	if srvCopy.ChangePassword == nil {
		srvCopy.ChangePassword = func(context.Context, *ChangePasswordRequest) (*AuthEmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "protocol.AuthService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "SignIn",
				Handler:    srvCopy.signIn,
			},
			{
				MethodName: "SignUp",
				Handler:    srvCopy.signUp,
			},
			{
				MethodName: "DeleteClaims",
				Handler:    srvCopy.deleteClaims,
			},
			{
				MethodName: "AddClaims",
				Handler:    srvCopy.addClaims,
			},
			{
				MethodName: "RefreshToken",
				Handler:    srvCopy.refreshToken,
			},
			{
				MethodName: "Confirm",
				Handler:    srvCopy.confirm,
			},
			{
				MethodName: "Restore",
				Handler:    srvCopy.restore,
			},
			{
				MethodName: "ForgotPassword",
				Handler:    srvCopy.forgotPassword,
			},
			{
				MethodName: "ChangePassword",
				Handler:    srvCopy.changePassword,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "protocol/auth.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewAuthServiceService creates a new AuthServiceService containing the
// implemented methods of the AuthService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewAuthServiceService(s interface{}) *AuthServiceService {
	ns := &AuthServiceService{}
	if h, ok := s.(interface {
		SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	}); ok {
		ns.SignIn = h.SignIn
	}
	if h, ok := s.(interface {
		SignUp(context.Context, *SignUpRequest) (*AuthEmptyResponse, error)
	}); ok {
		ns.SignUp = h.SignUp
	}
	if h, ok := s.(interface {
		DeleteClaims(context.Context, *DeleteClaimsRequest) (*AuthEmptyResponse, error)
	}); ok {
		ns.DeleteClaims = h.DeleteClaims
	}
	if h, ok := s.(interface {
		AddClaims(context.Context, *AddClaimsRequest) (*AuthEmptyResponse, error)
	}); ok {
		ns.AddClaims = h.AddClaims
	}
	if h, ok := s.(interface {
		RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	}); ok {
		ns.RefreshToken = h.RefreshToken
	}
	if h, ok := s.(interface {
		Confirm(context.Context, *ConfirmRequest) (*AuthEmptyResponse, error)
	}); ok {
		ns.Confirm = h.Confirm
	}
	if h, ok := s.(interface {
		Restore(context.Context, *RestoreRequest) (*AuthEmptyResponse, error)
	}); ok {
		ns.Restore = h.Restore
	}
	if h, ok := s.(interface {
		ForgotPassword(context.Context, *ForgotPasswordRequest) (*AuthEmptyResponse, error)
	}); ok {
		ns.ForgotPassword = h.ForgotPassword
	}
	if h, ok := s.(interface {
		ChangePassword(context.Context, *ChangePasswordRequest) (*AuthEmptyResponse, error)
	}); ok {
		ns.ChangePassword = h.ChangePassword
	}
	return ns
}

// UnstableAuthServiceService is the service API for AuthService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableAuthServiceService interface {
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	SignUp(context.Context, *SignUpRequest) (*AuthEmptyResponse, error)
	DeleteClaims(context.Context, *DeleteClaimsRequest) (*AuthEmptyResponse, error)
	AddClaims(context.Context, *AddClaimsRequest) (*AuthEmptyResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	Confirm(context.Context, *ConfirmRequest) (*AuthEmptyResponse, error)
	Restore(context.Context, *RestoreRequest) (*AuthEmptyResponse, error)
	ForgotPassword(context.Context, *ForgotPasswordRequest) (*AuthEmptyResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*AuthEmptyResponse, error)
}
